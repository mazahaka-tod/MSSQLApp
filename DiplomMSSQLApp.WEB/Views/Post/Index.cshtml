@using DiplomMSSQLApp.WEB.Helpers
@model DiplomMSSQLApp.WEB.Models.PostListViewModel

@{
    ViewBag.Title = "Штатное расписание";
}

<h2>Штатное расписание</h2>
<hr />

<div>
    <div id="filterToggle" class="btn btn-default">
        Поиск по фильтру <i>(Показать)</i>
    </div>
    <div id="filter" style="display:none;">
        @using (Ajax.BeginForm("Index", null, new AjaxOptions { OnSuccess = "processData", Url = Url.Action("Index") }, new { id = "filterform" })) {
            <table>
                <tr>
                    <td width="500px">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(m => m.Filter.DepartmentCode, "Код отдела", new { style = "margin-top: 18px" })
                            </dt>
                            <dd>
                                <span id="depCode">
                                    @Html.TextBoxFor(m => m.Filter.DepartmentCode[0], null, new { @class = "form-control", style = "margin-top: 12px", type = "number" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addDepartmentCode">Добавить поле</a>
                                    <a id="removeDepartmentCode" style="display:none;">Удалить поле</a>
                                </div>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.DepartmentName, "Название отдела", new { style = "margin-top: 18px" })
                            </dt>
                            <dd>
                                <span id="depName">
                                    @Html.TextBoxFor(m => m.Filter.DepartmentName[0], null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "50" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addDepartmentName">Добавить поле</a>
                                    <a id="removeDepartmentName" style="display:none;">Удалить поле</a>
                                </div>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.PostTitle, "Название должности", new { style = "margin-top: 18px" })
                            </dt>
                            <dd>
                                <span id="postTitle">
                                    @Html.TextBoxFor(m => m.Filter.PostTitle[0], null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "20" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addPostTitle">Добавить поле</a>
                                    <a id="removePostTitle" style="display:none;">Удалить поле</a>
                                </div>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinNumberOfUnits, "Количество штатных единиц от ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinNumberOfUnits, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxNumberOfUnits, " до ")
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxNumberOfUnits, null, new { @class = "form-control", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinSalary, "Оклад от ", new { style = "margin-top: 20px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinSalary, null, new { @class = "form-control", style = "margin-top: 18px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxSalary, " до ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinPremium, "Надбавка от ", new { style = "margin-top: 20px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinPremium, null, new { @class = "form-control", style = "margin-top: 18px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxPremium, " до ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxPremium, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinTotalSalary, "Зарплата за месяц от ", new { style = "margin-top: 20px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinTotalSalary, null, new { @class = "form-control", style = "margin-top: 18px", type = "number", min = "0", max = "9999999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxTotalSalary, " до ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxTotalSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999999" })
                                <span style="color:red;"></span>
                            </dd>
                        </dl>
                    </td>
                    <td valign="top">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Sort", "Сортировка")
                            </dt>
                            <dd>
                                @Html.DropDownListFor(m => m.Filter.SortField, new SelectList(new[] {
                                    new { label = "По названию должности", value = "PostTitle" },
                                    new { label = "По коду отдела", value = "DepartmentCode" },
                                    new { label = "По названию отдела", value = "DepartmentName" },
                                    new { label = "По количеству штатных единиц", value = "NumberOfUnits" },
                                    new { label = "По окладу", value = "Salary" },
                                    new { label = "По надбавке", value = "Premium" },
                                    new { label = "По зарплате за месяц", value = "TotalSalary" } }, "value", "label"),
                                    new { @class = "form-control", style = "margin-bottom: 12px" })
                                @Html.DropDownListFor(m => m.Filter.SortOrder, new SelectList(new[] {
                                    new { label = "По возрастанию", value = "Asc" },
                                    new { label = "По убыванию", value = "Desc" } }, "value", "label"),
                                    new { @class = "form-control", style = "margin-bottom: 12px" })
                            </dd>

                            <dt>
                                @Html.Label("Columns", "Показывать столбцы")
                            </dt>
                            <dd>
                                <input type="checkbox" id="Filter_Columns0" name="Filter.Columns" value="0" />
                                @Html.Label("Columns0", "Код отдела")
                                <br />
                                <input type="checkbox" id="Filter_Columns1" name="Filter.Columns" value="1" />
                                @Html.Label("Columns1", "Название отдела")
                                <br />
                                <input type="checkbox" id="Filter_Columns2" name="Filter.Columns" value="2" />
                                @Html.Label("Columns2", "Название должности")
                                <br />
                                <input type="checkbox" id="Filter_Columns3" name="Filter.Columns" value="3" />
                                @Html.Label("Columns3", "Количество штатных единиц")
                                <br />
                                <input type="checkbox" id="Filter_Columns4" name="Filter.Columns" value="4" />
                                @Html.Label("Columns4", "Оклад")
                                <br />
                                <input type="checkbox" id="Filter_Columns5" name="Filter.Columns" value="5" />
                                @Html.Label("Columns5", "Надбавка")
                                <br />
                                <input type="checkbox" id="Filter_Columns6" name="Filter.Columns" value="6" />
                                @Html.Label("Columns6", "Зарплата за месяц")
                            </dd>

                            <dt>
                                @Html.Label("AntiFilter", "Несоответствующие фильтру")
                            </dt>
                            <dd>
                                @Html.CheckBoxFor(m => m.Filter.IsAntiFilter, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsAntiFilter, "Отрицание фильтра")
                            </dd>

                            <dt>
                            </dt>
                            <dd>
                                <input type="submit" value="Найти" class="btn btn-primary" />
                                @Html.ActionLink("Сброс", null, null, new { id = "reset", @class = "btn btn-default" })
                            </dd>
                        </dl>
                    </td>
                </tr>
            </table>
        }
    </div>
</div>

<hr />

<p>
    @Html.ActionLink("Добавить должность", "Create", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Удалить все должности", "DeleteAll", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Экспортировать данные в JSON файл", "ExportJson", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Добавить 100 должностей (для тестирования)", "TestCreate", null, new { @class = "btn btn-default" })
</p>

@if (Model.Posts.Count() > 0) {
    <table class="table table-striped table-hover">
        <thead id="tableHeader">
            <tr>
                @if (Model.Filter.Columns.Contains("0")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).Department.Code)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("1")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).Department.DepartmentName)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("2")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).Title)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("3")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).NumberOfUnits)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("4")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).Salary)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("5")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).Premium)
                    </th>
                }
                @if (Model.Filter.Columns.Contains("6")) {
                    <th>
                        @Html.DisplayNameFor(model => model.Posts.ElementAt(0).TotalSalary)
                    </th>
                }
                <th width="150px"></th>
            </tr>
        </thead>

        <tbody id="tableBody">
            @foreach (var item in Model.Posts) {
                <tr>
                    @if (Model.Filter.Columns.Contains("0")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.Department.Code)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("1")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.Department.DepartmentName)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("2")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("3")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.NumberOfUnits)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("4")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.Salary)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("5")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.Premium)
                        </td>
                    }
                    @if (Model.Filter.Columns.Contains("6")) {
                        <td>
                            @Html.DisplayFor(modelItem => item.TotalSalary)
                        </td>
                    }
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                </tr>
            }
        </tbody>

        <tfoot id="tableFooter">
            <tr>
                <td></td>
                <td></td>
                <td>
                    <b>На странице</b>
                </td>
                <td>
                    <b>@Model.NumberOfUnitsOnPage</b>
                </td>
                <td></td>
                <td></td>
                <td>
                    <b>@Model.SalaryOnPage</b>
                </td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td>
                    <b>Итого</b>
                </td>
                <td>
                    <b>@Model.TotalNumberOfUnits</b>
                </td>
                <td></td>
                <td></td>
                <td>
                    <b>@Model.TotalSalary</b>
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>
}

<p>
    @Html.Label("Count", "Количество должностей: " + Model.PageInfo.TotalItems)
</p>

<div id="contentPager" class="btn-group">
    @Html.PageLinks(Model.PageInfo, x => Url.Action("Index", new { filterAsJsonString = Json.Encode(Model.Filter), page = x }))
</div>

@section scripts {
<script>
        function updateHrefAttr(target, numPage, data) {
            var attr_href = '/Post?filterAsJsonString=' + JSON.stringify(data.Filter) + '&page=' + numPage;
            target.attr({
                'data-ajax-url': attr_href,
                'href': attr_href
            });
        }

        function processData(data) {
            // Обновляем заголовок таблицы
            var target = $('#tableHeader');
            target.empty();
            $('#tableHeader').append('<tr>');
            target = $('#tableHeader tr');
            if (data.Filter.Columns.indexOf('0') != -1) target.append('<th>Код отдела</th>');
            if (data.Filter.Columns.indexOf('1') != -1) target.append('<th>Название отдела</th>');
            if (data.Filter.Columns.indexOf('2') != -1) target.append('<th>Название должности</th>');
            if (data.Filter.Columns.indexOf('3') != -1) target.append('<th>Количество штатных единиц</th>');
            if (data.Filter.Columns.indexOf('4') != -1) target.append('<th>Оклад, руб.</th>');
            if (data.Filter.Columns.indexOf('5') != -1) target.append('<th>Надбавка, руб.</th>');
            if (data.Filter.Columns.indexOf('6') != -1) target.append('<th>Всего, руб.</th>');
            target.append('<th width="150px"></th>');

            // Заполняем таблицу
            target = $('#tableBody');
            target.empty();
            for (var i = 0; i < data.Posts.length; i++) {
                $('#tableBody').append('<tr>');
                target = $('#tableBody tr:last');
                var post = data.Posts[i];
                if (data.Filter.Columns.indexOf('0') != -1)
                    target.append('<td>' + post.DepartmentCode + '</td>');

                if (data.Filter.Columns.indexOf('1') != -1)
                    target.append('<td>' + post.DepartmentName + '</td>');

                if (data.Filter.Columns.indexOf('2') != -1)
                    target.append('<td>' + post.Title + '</td>');

                if (data.Filter.Columns.indexOf('3') != -1)
                    target.append('<td>' + post.NumberOfUnits + '</td>');

                if (data.Filter.Columns.indexOf('4') != -1)
                    target.append('<td>' + post.Salary + '</td>');

                if (data.Filter.Columns.indexOf('5') != -1)
                    target.append('<td>' + post.Premium + '</td>');

                if (data.Filter.Columns.indexOf('6') != -1)
                    target.append('<td>' + post.TotalSalary + '</td>');

                target.append('<td><a href="/Post/Edit/'    + post.Id + '">Edit</a> | '
                                + '<a href="/Post/Details/' + post.Id + '">Details</a> | '
                                + '<a href="/Post/Delete/'  + post.Id + '">Delete</a></td>');
            }

            // Обновляем footer таблицы
            target = $('#tableFooter');
            target.empty();
            $('#tableFooter').append('<tr>');
            target = $('#tableFooter tr');
            if (data.Filter.Columns.indexOf('0') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('1') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('2') != -1) target.append('<td><b>На странице</b></td>');
            if (data.Filter.Columns.indexOf('3') != -1) target.append('<td><b>' + data.NumberOfUnitsOnPage + '</b></td>');
            if (data.Filter.Columns.indexOf('4') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('5') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('6') != -1) target.append('<td><b>' + data.SalaryOnPage + '</b></td>');
            target.append('<td></td>');

            $('#tableFooter').append('<tr>');
            target = $('#tableFooter tr:last');
            if (data.Filter.Columns.indexOf('0') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('1') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('2') != -1) target.append('<td><b>Итого</b></td>');
            if (data.Filter.Columns.indexOf('3') != -1) target.append('<td><b>' + data.TotalNumberOfUnits + '</b></td>');
            if (data.Filter.Columns.indexOf('4') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('5') != -1) target.append('<td></td>');
            if (data.Filter.Columns.indexOf('6') != -1) target.append('<td><b>' + data.TotalSalary + '</b></td>');
            target.append('<td></td>');

            // Обновляем кнопки навигации
            // Кнопка '<<'
            target = $('#firstpagebutton');
            updateHrefAttr(target, 1, data);

            // Кнопка '<'
            var numPage = data.PageInfo.PageNumber > 3 ? data.PageInfo.PageNumber - 3 : 1;
            target = $('#leftbutton');
            updateHrefAttr(target, numPage, data);

            // Кнопка '>'
            numPage = data.PageInfo.PageNumber < data.PageInfo.TotalPages - 3 ? data.PageInfo.PageNumber + 3 : data.PageInfo.TotalPages;
            target = $('#rightbutton');
            updateHrefAttr(target, numPage, data);

            // Кнопка '>>'
            numPage = data.PageInfo.TotalPages;
            target = $('#lastpagebutton');
            updateHrefAttr(target, numPage, data);

            // Кнопки с цифрами
            $('a.centerbuttons').remove();
            var minPage = data.PageInfo.PageNumber > 1 ? data.PageInfo.PageNumber - 1 : 1;
            var maxPage = data.PageInfo.PageNumber < data.PageInfo.TotalPages - 1 ? data.PageInfo.PageNumber + 1 : data.PageInfo.TotalPages;
            for (numPage = minPage; numPage <= maxPage; numPage++) {
                target = $('#leftbutton').clone().insertBefore('#rightbutton');
                updateHrefAttr(target, numPage, data);
                target.text(numPage);
                // если текущая страница, то выделяем ее
                if (numPage == data.PageInfo.PageNumber)
                    target.addClass('centerbuttons btn btn-primary selected');
                else
                    target.addClass('centerbuttons btn btn-default');
            }

            // Обновляем метку 'Количество должностей: '
            $('label[for="Count"]').text('Количество должностей: ' + data.PageInfo.TotalItems);
        }
</script>

    <script>
    $(document).ready(function () {
        // Добавляет на форму фильтра текстовое поле 'Код отдела'
        $('#addDepartmentCode').on('click', function (event) {
            event.preventDefault();
            var countDepartmentCode = $('#depCode input').length;
            if (countDepartmentCode < 5) {
                $('input:first', '#depCode').clone().attr({
                    style: 'margin-top:6px;',
                    id: 'Filter_DepartmentCode_' + countDepartmentCode + '_',
                    name: 'Filter.DepartmentCode[' + countDepartmentCode + ']'
                }).val('').appendTo('#depCode');
                $('span:first', '#depCode').clone().appendTo('#depCode');
            }
            if (countDepartmentCode === 1)
                $('#removeDepartmentCode').css('display', 'block');
            if (countDepartmentCode === 4)
                $('#addDepartmentCode').css('display', 'none');
        });

        // Удаляет на форме фильтра текстовое поле 'Код отдела'
        $('#removeDepartmentCode').on('click', function (event) {
            event.preventDefault();
            var countDepartmentCode = $('#depCode input').length;
            if (countDepartmentCode > 1)
                $('#depCode span:last, #depCode input:last').remove();
            if (countDepartmentCode === 2)
                $('#removeDepartmentCode').css('display', 'none');
            if (countDepartmentCode === 5)
                $('#addDepartmentCode').css('display', 'block');
        });

        // Добавляет на форму фильтра текстовое поле 'Название отдела'
        $('#addDepartmentName').on('click', function (event) {
            event.preventDefault();
            var countDepartmentName = $('#depName input').length;
            if (countDepartmentName < 5) {
                // Добавляем элемент input
                $('input:first', '#depName').clone().attr({
                    style: 'margin-top:6px;',
                    id: 'Filter_DepartmentName_' + countDepartmentName + '_',
                    name: 'Filter.DepartmentName[' + countDepartmentName + ']'
                }).val('').appendTo('#depName');
                // Добавляем элемент span
                $('span:first', '#depName').clone().appendTo('#depName');
            }
            if (countDepartmentName === 1)
                $('#removeDepartmentName').css('display', 'block');
            if (countDepartmentName === 4)
                $('#addDepartmentName').css('display', 'none');
        });

        // Удаляет на форме фильтра текстовое поле 'Название отдела'
        $('#removeDepartmentName').on('click', function (event) {
            event.preventDefault();
            var countDepartmentName = $('#depName input').length;
            if (countDepartmentName > 1)
                $('#depName span:last, #depName input:last').remove();
            if (countDepartmentName === 2)
                $('#removeDepartmentName').css('display', 'none');
            if (countDepartmentName === 5)
                $('#addDepartmentName').css('display', 'block');
        });

        // Добавляет на форму фильтра текстовое поле 'Название должности'
        $('#addPostTitle').on('click', function (event) {
            event.preventDefault();
            var countPostTitle = $('#postTitle input').length;
            if (countPostTitle < 5) {
                // Добавляем элемент input
                $('input:first', '#postTitle').clone().attr({
                    style: 'margin-top:6px;',
                    id: 'Filter_PostTitle_' + countPostTitle + '_',
                    name: 'Filter.PostTitle[' + countPostTitle + ']'
                }).val('').appendTo('#postTitle');
                // Добавляем элемент span
                $('span:first', '#postTitle').clone().appendTo('#postTitle');
            }
            if (countPostTitle === 1)
                $('#removePostTitle').css('display', 'block');
            if (countPostTitle === 4)
                $('#addPostTitle').css('display', 'none');
        });

        // Удаляет на форме фильтра текстовое поле 'Название должности'
        $('#removePostTitle').on('click', function (event) {
            event.preventDefault();
            var countPostTitle = $('#postTitle input').length;
            if (countPostTitle > 1)
                $('#postTitle span:last, #postTitle input:last').remove();
            if (countPostTitle === 2)
                $('#removePostTitle').css('display', 'none');
            if (countPostTitle === 5)
                $('#addPostTitle').css('display', 'block');
        });

        // Устанавливает checkbox на форме фильтра
        var columns = ('@String.Concat(Model.Filter.Columns)').split('');
        $('input[name="Filter.Columns"]').val(columns);

        // Устанавливает значения в полях фильтра 'Код отдела'
        @if (Model.Filter.DepartmentCode != null) {
            int?[] departmentCodes = Model.Filter.DepartmentCode.Where(x => x != null).ToArray();
            if (departmentCodes.Length > 0) {
                @:$('#Filter_DepartmentCode_0_').val('@departmentCodes[0]');
                for (int i = 1; i < departmentCodes.Length; i++) {
                    @:$('input:first', '#depCode').clone().attr({ style: 'margin-top:6px;', id: 'Filter_DepartmentCode_' + @i + '_', name: 'Filter.DepartmentCode[' + @i + ']' }).val('@departmentCodes[i]').appendTo('#depCode');
                    @:$('span:first', '#depCode').clone().appendTo('#depCode');
                }
                if (departmentCodes.Length == 5) {
                    @:$('#addDepartmentCode').css('display', 'none');
                }
                if (departmentCodes.Length > 1) {
                    @:$('#removeDepartmentCode').css('display', 'block');
                }
            }
        }

        // Устанавливает значения в полях фильтра 'Название отдела'
        @if (Model.Filter.DepartmentName != null) {
            string[] departmentNames = Model.Filter.DepartmentName.Where(x => !string.IsNullOrWhiteSpace(x)).ToArray();
            if (departmentNames.Length > 0) {
                @:$('#Filter_DepartmentName_0_').val('@departmentNames[0]');
                for (int i = 1; i < departmentNames.Length; i++) {
                    @:$('input:first', '#depName').clone().attr({ style: 'margin-top:6px;', id: 'Filter_DepartmentName_' + @i + '_', name: 'Filter.DepartmentName[' + @i + ']' }).val('@departmentNames[i]').appendTo('#depName');
				    @:$('span:first', '#depName').clone().appendTo('#depName');
                }
                if (departmentNames.Length == 5) {
                    @:$('#addDepartmentName').css('display', 'none');
                }
                if (departmentNames.Length > 1) {
                    @:$('#removeDepartmentName').css('display', 'block');
                }
            }
        }

        // Устанавливает значения в полях фильтра 'Название должности'
        @if (Model.Filter.PostTitle != null) {
            string[] postTitles = Model.Filter.PostTitle.Where(x => !string.IsNullOrWhiteSpace(x)).ToArray();
            if (postTitles.Length > 0) {
                @:$('#Filter_PostTitle_0_').val('@postTitles[0]');
                for (int i = 1; i < postTitles.Length; i++) {
                    @:$('input:first', '#postTitle').clone().attr({ style: 'margin-top:6px;', id: 'Filter_PostTitle_' + @i + '_', name: 'Filter.PostTitle[' + @i + ']' }).val('@postTitles[i]').appendTo('#postTitle');
				    @:$('span:first', '#postTitle').clone().appendTo('#postTitle');
                }
                if (postTitles.Length == 5) {
                    @:$('#addPostTitle').css('display', 'none');
                }
                if (postTitles.Length > 1) {
                    @:$('#removePostTitle').css('display', 'block');
                }
            }
        }

        // Ограничивает количество символов в текстовых полях фильтра
        $('#filterform').on('input', 'input[type="text"]', function (event) {
            $this = $(this);
            if ($this.val().length >= $this.attr('maxlength')) {
                $this.next('span').text('Слишком длинное значение');
                setTimeout(function () {
                    $this.next('span').text('');
                }, 2000);
            }
        });

        // Запрещает ввод цифр в полях фильтра 'Название отдела' и 'Название должности'
        $('#depName, #postTitle').on('keypress', 'input', function (event) {
            var $this = $(this);
            if (event.charCode > 47 && event.charCode < 58) {
                $this.next('span').text('Цифры недопустимы');
                setTimeout(function () {
                    $this.next('span').text('');
                }, 2000);
                return false;
            }
        });

        // Ограничивает диапазон значений в полях фильтра 'Количество штатных единиц', 'Оклад', 'Надбавка' и 'Зарплата за месяц'
        $('#Filter_MinNumberOfUnits, #Filter_MaxNumberOfUnits, #Filter_MinSalary, #Filter_MaxSalary, ' +
            '#Filter_MinPremium, #Filter_MaxPremium, #Filter_MinTotalSalary, #Filter_MaxTotalSalary').on('keyup', function (event) {
            $this = $(this);
                var max = $this.attr('max');
            if ($this.val() < 0 || $this.val() > max || $this.val().length > 10) {
                $this.next('span').text('Допустимый диапазон [0; ' + max + ']');
                setTimeout(function () {
                    $this.val(max);
                    $this.next('span').text('');
                }, 2000);
                return false;
            }
        });

        // Показывает или скрывает блок с фильтром
        $('#filterToggle').on('click', function (event) {
            var $this = $(this);
            $('#filter').slideToggle('slow', function () {
                $this.html('Поиск по фильтру <i>(' + ($(this).is(':hidden') ? 'Показать' : 'Скрыть') + ')</i>');
            });
        });

        // Сбрасывает параметры фильтра в дефолт
        $('#reset').on('click', function (event) {
            event.preventDefault();
            // Сбрасывает input[checkbox] на форме фильтра
            $('input[type="checkbox"]', '#filterform').prop('checked', false);
            $('input[name="Filter.Columns"]', '#filterform').prop('checked', true);
            // Сбрасывает input[text,number] на форме фильтра
            $(':nth-child(n+3)', '#depCode, #depName, #postTitle').remove();
            $('input[type="text"], input[type="number"]', '#filterform').val('');
            // Сбрасывает select на форме фильтра
            $('option:first', '#filterform select').prop('selected', true);
            // Сбрасывает отображение ссылок
            $('#addDepartmentCode, #addDepartmentName, #addPostTitle').css('display', 'block');
            $('#removeDepartmentCode, #removeDepartmentName, #removePostTitle').css('display', 'none');
        });
    })
    </script>
}
