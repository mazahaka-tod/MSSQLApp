@using DiplomMSSQLApp.WEB.Helpers
@model DiplomMSSQLApp.WEB.Models.EmployeeListViewModel

@{
    ViewBag.Title = "Список сотрудников";
}

<h2>Список сотрудников</h2>
<hr />

<div>
    <div id="animationToggle" class="btn btn-default">
        С хорошим настроением лучше работается <i>(Показать)</i>
    </div>
    <div id="animation" style="display:none;">
        <img src=@Url.Content("~/Content/Animations/TheBest.gif") alt="TheBest" style="margin:10px;" />
        <div>Лучший:)</div>
    </div>
</div>

<hr />

<div>
    <div id="filterToggle" class="btn btn-default">
        Поиск по фильтру <i>(Показать)</i>
    </div>
    <div id="filter" style="display:none;">
        @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { id = "filterform" })) {
            <table>
                <tr>
                    <td>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(m => m.Filter.LastName, "Фамилия")
                            </dt>
                            <dd>
                                <span id="lname">
                                    @Html.TextBoxFor(m => m.Filter.LastName[0], null, new { @class = "form-control", maxlength = "15" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addlastname">Добавить поле</a>
                                    <a id="removelastname" style="display:none;">Удалить поле</a>
                                </div>
                                @Html.CheckBoxFor(m => m.Filter.IsMatchAnyLastName, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsMatchAnyLastName, "Любое соответствие (Логическое ИЛИ)")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.Email, "Email", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.Email, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "15" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.Label("Phone", "Телефон")
                            </dt>
                            <dd>
                                @Html.CheckBoxFor(m => m.Filter.IsPhoneNumber, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsPhoneNumber, "Есть телефон")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.HireDate, "Дата найма на работу", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.HireDate, null, new { @class = "form-control", style = "margin-top: 12px", type = "date" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinSalary, "Зарплата от ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxSalary, " до ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.Bonus, "Премия", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                <span id="bns">
                                    @Html.TextBoxFor(m => m.Filter.Bonus[0], null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "1", step = "0.01" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addbonus">Добавить поле</a>
                                    <a id="removebonus" style="display:none;">Удалить поле</a>
                                </div>
                                @Html.CheckBoxFor(m => m.Filter.IsBonus, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsBonus, "Есть премия")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.PostTitle, "Должность", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.PostTitle, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "12" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.DepartmentName, "Название отдела", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.DepartmentName, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "12" })
                                <span style="color:red;"></span>
                            </dd>
                        </dl>
                    </td>
                    <td valign="top">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Sort", "Сортировка")
                            </dt>
                            <dd>
                                @Html.DropDownListFor(m => m.Filter.SortField, new SelectList(new[] { new { label = "По фамилии сотрудника", value = "LastName" }, new { label = "По Email", value = "Email" }, new { label = "По дате найма на работу", value = "HireDate" }, new { label = "По зарплате", value = "Salary" }, new { label = "По премии", value = "Bonus" }, new { label = "По должности", value = "Post" }, new { label = "По названию отдела", value = "DepartmentName" } }, "value", "label"), new { @class = "form-control", style = "margin-bottom: 12px" })
                                @Html.DropDownListFor(m => m.Filter.SortOrder, new SelectList(new[] { new { label = "По возрастанию", value = "Asc" }, new { label = "По убыванию", value = "Desc" } }, "value", "label"), new { @class = "form-control", style = "margin-bottom: 12px" })
                            </dd>

                            <dt>
                                @Html.Label("Columns", "Показывать столбцы")
                            </dt>
                            <dd>
                                <input type="checkbox" id="Filter_Columns0" name="Filter.Columns" value="0" />
                                @Html.Label("Columns0", "Фамилия сотрудника")
                                <br />
                                <input type="checkbox" id="Filter_Columns1" name="Filter.Columns" value="1" />
                                @Html.Label("Columns1", "Имя сотрудника")
                                <br />
                                <input type="checkbox" id="Filter_Columns2" name="Filter.Columns" value="2" />
                                @Html.Label("Columns2", "Email")
                                <br />
                                <input type="checkbox" id="Filter_Columns3" name="Filter.Columns" value="3" />
                                @Html.Label("Columns3", "Телефон")
                                <br />
                                <input type="checkbox" id="Filter_Columns4" name="Filter.Columns" value="4" />
                                @Html.Label("Columns4", "Дата приема на работу")
                                <br />
                                <input type="checkbox" id="Filter_Columns5" name="Filter.Columns" value="5" />
                                @Html.Label("Columns5", "Зарплата")
                                <br />
                                <input type="checkbox" id="Filter_Columns6" name="Filter.Columns" value="6" />
                                @Html.Label("Columns6", "Премия")
                                <br />
                                <input type="checkbox" id="Filter_Columns7" name="Filter.Columns" value="7" />
                                @Html.Label("Columns7", "Должность")
                                <br />
                                <input type="checkbox" id="Filter_Columns8" name="Filter.Columns" value="8" />
                                @Html.Label("Columns8", "Название отдела")
                            </dd>

                            <dt>
                                @Html.Label("AntiFilter", "Несоответствующие фильтру")
                            </dt>
                            <dd>
                                @Html.CheckBoxFor(m => m.Filter.IsAntiFilter, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsAntiFilter, "Отрицание фильтра")
                            </dd>

                            <dt>
                            </dt>
                            <dd>
                                <input type="submit" value="Найти" class="btn btn-primary" />
                                <a id="reset" class="btn btn-default">Сброс</a>
                            </dd>
                        </dl>
                    </td>
                </tr>
            </table>
        }
    </div>
</div>

<hr />

<div>
    <div id="performanceTestsToggle" class="btn btn-default">
        Тесты производительности <i>(Показать)</i>
    </div>
    <div id="performanceTests" style="display:none;">
        <p>
            @using (Html.BeginForm("TestCreate", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест добавления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Добавить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestRead", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест выборки сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Salary", "Salary >= ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=50000 name="salary" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Выбрать" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestUpdate", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест обновления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Обновить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestDelete", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест удаления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Удалить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
    </div>
</div>

<hr />
<p>
    @Html.ActionLink("Добавить сотрудника", "Create", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Удалить всех сотрудников", "DeleteAll", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Преобразовать данные в Json", "ExportJson", null, new { @class = "btn btn-default" })
</p>

@if (Model.Employees.Count() > 0) {
    <table class="table table-striped table-hover">
        <tr>
            @if (Model.Filter.Columns.Contains("0")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).LastName)
                </th>
            }
            @if (Model.Filter.Columns.Contains("1")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).FirstName)
                </th>
            }
            @if (Model.Filter.Columns.Contains("2")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Email)
                </th>
            }
            @if (Model.Filter.Columns.Contains("3")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).PhoneNumber)
                </th>
            }
            @if (Model.Filter.Columns.Contains("4")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).HireDate)
                </th>
            }
            @if (Model.Filter.Columns.Contains("5")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Salary)
                </th>
            }
            @if (Model.Filter.Columns.Contains("6")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Bonus)
                </th>
            }
            @if (Model.Filter.Columns.Contains("7")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Post.Title)
                </th>
            }
            @if (Model.Filter.Columns.Contains("8")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Department.DepartmentName)
                </th>
            }
            <th></th>
        </tr>

        @foreach (var item in Model.Employees) {
            <tr>
                @if (Model.Filter.Columns.Contains("0")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("1")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("2")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("3")) {
                    <td width="130px">
                        @Html.DisplayFor(modelItem => item.PhoneNumber)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("4")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.HireDate)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("5")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Salary)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("6")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Bonus)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("7")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Post.Title)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("8")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Department.DepartmentName)
                    </td>
                }
                <td width="150px">
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>
}

<p>
    @Html.Label("Count", "Количество сотрудников: " + Model.PageInfo.TotalItems)
</p>

<div class="btn-group">
    @Html.PageLinks(Model.PageInfo, x => Url.Action("Index", new { filterAsJsonString = Html.Raw(Json.Encode(Model.Filter)), page = x }))
</div>

@section scripts {
<script>
    $(document).ready(function () {
        // Добавляет на форму фильтра текстовое поле Фамилия
        $('#addlastname').on('click', function (event) {
            event.preventDefault();
            var countLastName = $('#lname input').length;
            if (countLastName < 5) {
                $('input:first', '#lname').clone().attr({
                    style: 'margin-top:6px;',
                    id: 'Filter_LastName_' + countLastName + '_',
                    name: 'Filter.LastName[' + countLastName + ']'
                }).val('').appendTo('#lname');
                $('span:first', '#lname').clone().appendTo('#lname');
            }
            if (countLastName === 1)
                $('#removelastname').css('display', 'block');
            if (countLastName === 4)
                $('#addlastname').css('display', 'none');
        });

        // Удаляет на форме фильтра текстовое поле Фамилия
        $('#removelastname').on('click', function (event) {
            event.preventDefault();
            var countLastName = $('#lname input').length;
            if (countLastName > 1)
                $('#lname span:last, #lname input:last').remove();
            if (countLastName === 2)
                $('#removelastname').css('display', 'none');
            if (countLastName === 5)
                $('#addlastname').css('display', 'block');
        });

        // Добавляет на форму фильтра текстовое поле Премия
        $('#addbonus').on('click', function (event) {
            event.preventDefault();
            var countBonus = $('#bns input').length;
            if (countBonus < 5) {
                $('input:first', '#bns').clone().attr({
                    style: 'margin-top:6px;',
                    id: 'Filter_Bonus_' + countBonus + '_',
                    name: 'Filter.Bonus[' + countBonus + ']'
                }).val('').appendTo('#bns');
                $('span:first', '#bns').clone().appendTo('#bns');
            }
            if (countBonus === 1)
                $('#removebonus').css('display', 'block');
            if (countBonus === 4)
                $('#addbonus').css('display', 'none');
        });

        // Удаляет на форме фильтра текстовое поле Премия
        $('#removebonus').on('click', function (event) {
            event.preventDefault();
            var countBonus = $('#bns input').length;
            if (countBonus > 1)
                $('#bns span:last, #bns input:last').remove();
            if (countBonus === 2)
                $('#removebonus').css('display', 'none');
            if (countBonus === 5)
                $('#addbonus').css('display', 'block');
        });

        // Устанавливает checkbox на форме фильтра
        var columns = ('@String.Concat(Model.Filter.Columns)').split('');
        $('input[name="Filter.Columns"]').val(columns);

        // Устанавливает значения в полей Фамилия на форме фильтра
        @if (Model.Filter.LastName != null) {
            string[] lastnames = Model.Filter.LastName.Where(x => !string.IsNullOrWhiteSpace(x)).ToArray();
            if (lastnames.Length > 0) {
                @:$('#Filter_LastName_0_').val('@lastnames[0]');
                for (int i = 1; i < lastnames.Length; i++) {
                    @:$('input:first', '#lname').clone().attr({ style: 'margin-top:6px;', id: 'Filter_LastName_' + @i + '_', name: 'Filter.LastName[' + @i + ']' }).val('@lastnames[i]').appendTo('#lname');
                    @:$('span:first', '#lname').clone().appendTo('#lname');
                }
                if (lastnames.Length == 5) {
                    @:$('#addlastname').css('display', 'none');
                }
                if (lastnames.Length > 1) {
                    @:$('#removelastname').css('display', 'block');
                }
            }
        }

        // Устанавливает значения в полей Премия на форме фильтра
        @if (Model.Filter.Bonus != null) {
            double?[] bonuses = Model.Filter.Bonus.Where(x => x.HasValue).ToArray();
            if (bonuses.Length > 0) {
                @:$('#Filter_Bonus_0_').val('@bonuses[0]');
                for (int i = 1; i < bonuses.Length; i++) {
                    @:$('input:first', '#bns').clone().attr({ style: 'margin-top:6px;', id: 'Filter_Bonus_' + @i + '_', name: 'Filter.Bonus[' + @i + ']' }).val('@bonuses[i]').appendTo('#bns');
				    @:$('span:first', '#bns').clone().appendTo('#bns');
                }
                if (bonuses.Length == 5) {
                    @:$('#addbonus').css('display', 'none');
                }
                if (bonuses.Length > 1) {
                    @:$('#removebonus').css('display', 'block');
                }
            }
        }

        // Ограничивает количество символов в текстовых полях фильтра
        $('#filterform').on('input', 'input[type="text"]', function (event) {
            $this = $(this);
            if ($this.val().length >= $this.attr('maxlength')) {
                $this.next('span').text('Слишком длинное значение');
                setTimeout(function () {
                    $this.next('span').text('');
                }, 2000);
            }
        });

        // Запрещает ввод цифр в полях Фамилия, Должность и Название отдела
        var handlerOnlyLetters = function (event) {
            var $this = $(this);
            if (event.charCode > 47 && event.charCode < 58) {
                $this.next('span').text('Цифры недопустимы');
                setTimeout(function () {
                    $this.next('span').text('');
                }, 2000);
                return false;
            }
        };
        $('#lname').on('keypress', 'input', handlerOnlyLetters);
        $('#Filter_PostTitle, #Filter_DepartmentName').on('keypress', handlerOnlyLetters);

        // Ограничивает диапазон значений в полях Зарплаты
        $('#Filter_MinSalary, #Filter_MaxSalary').on('keyup', function (event) {
            $this = $(this);
            if ($this.val() < 0 || $this.val() > 9999999 || $this.val().length > 10) {
                $this.next('span').text('Допустимый диапазон [0; 9999999]');
                setTimeout(function () {
                    $this.val('9999999');
                    $this.next('span').text('');
                }, 2000);
                return false;
            }
        });

        // Ограничивает диапазон значений в поле Премия
        $('#bns').on('keyup', 'input', function (event) {
            $this = $(this);
            if ($this.val() < 0 || $this.val() > 1 || $this.val().length > 4) {
                $this.next('span').text('Допустимый диапазон [0.00; 1.00]');
                setTimeout(function () {
                    $this.val('1');
                    $this.next('span').text('');
                }, 2000);
                return false;
            }
        });

        // Показывает или скрывает блок с анимацией
        $('#animationToggle').on('click', function (event) {
            var $this = $(this);
            $('#animation').slideToggle('slow', function () {
                $this.html('С хорошим настроением лучше работается <i>(' + ($(this).is(':hidden') ? 'Показать' : 'Скрыть') + ')</i>');
            });
        });

        // Показывает или скрывает блок с фильтром
        $('#filterToggle').on('click', function (event) {
            var $this = $(this);
            $('#filter').slideToggle('slow', function () {
                $this.html('Поиск по фильтру <i>(' + ($(this).is(':hidden') ? 'Показать' : 'Скрыть') + ')</i>');
            });
        });

        // Показывает или скрывает блок с тестами
        $('#performanceTestsToggle').on('click', function (event) {
            var $this = $(this);
            $('#performanceTests').slideToggle('slow', function () {
                $this.html('Тесты производительности <i>(' + ($(this).is(':hidden') ? 'Показать' : 'Скрыть') + ')</i>');
            });
        });

        // Сбрасывает параметры фильтра в дефолт
        $('#reset').on('click', function (event) {
            event.preventDefault();
            // Сбрасывает input[checkbox] на форме фильтра
            $('input[type="checkbox"]', '#filterform').prop('checked', false);
            $('input[name="Filter.Columns"]', '#filterform').prop('checked', true);
            // Сбрасывает input[text,number,date] на форме фильтра
            $(':nth-child(n+3)', '#lname, #bns').remove();
            $('input', '#filterform').not('[type="submit"]').val('');
            // Сбрасывает select на форме фильтра
            $('option:first', '#filterform select').prop('selected', true);
            // Сбрасывает отображение ссылок
            $('#addlastname, #addbonus').css('display', 'block');
            $('#removelastname, #removebonus').css('display', 'none');
        });
    })
</script>
}
