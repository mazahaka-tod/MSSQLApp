@using DiplomMSSQLApp.WEB.Helpers
@model DiplomMSSQLApp.WEB.Models.EmployeeListViewModel

@{
    ViewBag.Title = "Список сотрудников";
}

<h2>Список сотрудников</h2>
<hr />

<div>
    <div id="animationToggle" class="btn btn-default">
        С хорошим настроением лучше работается <i>(Показать)</i>
    </div>
    <div id="animation" style="display:none;">
        <img src=@Url.Content("~/Content/Animations/TheBest.gif") alt="TheBest" style="margin:10px;" />
        <div>Лучший:)</div>
    </div>
</div>

<hr />

<div>
    <div id="filterToggle" class="btn btn-default">
        Поиск по фильтру <i>(Показать)</i>
    </div>
    <div id="filter" style="display:none;">
        @using (Html.BeginForm("Index", "Home")) {
            <table>
                <tr>
                    <td>
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.LabelFor(m => m.Filter.LastName, "Фамилия")
                            </dt>
                            <dd>
                                <span id="lname">
                                    @Html.TextBoxFor(m => m.Filter.LastName[0], null, new { @class = "form-control", maxlength = "15" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addlastname">Добавить поле</a>
                                </div>
                                @Html.CheckBoxFor(m => m.Filter.IsMatchAnyLastName, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsMatchAnyLastName, "Любое соответствие (Логическое ИЛИ)")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.Email, "Email", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.Email, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "15" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.Label("Phone", "Телефон")
                            </dt>
                            <dd>
                                @Html.CheckBoxFor(m => m.Filter.IsPhoneNumber, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsPhoneNumber, "Есть телефон")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.HireDate, "Дата найма на работу", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.HireDate, null, new { @class = "form-control", style = "margin-top: 12px", type = "date" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MinSalary, "Зарплата от ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MinSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.MaxSalary, " до ", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.MaxSalary, null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "9999999" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.Bonus, "Премия", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                <span id="bns">
                                    @Html.TextBoxFor(m => m.Filter.Bonus[0], null, new { @class = "form-control", style = "margin-top: 12px", type = "number", min = "0", max = "1", step = "0.01" })
                                    <span style="color:red;"></span>
                                </span>
                                <div>
                                    <a id="addbonus">Добавить поле</a>
                                </div>
                                @Html.CheckBoxFor(m => m.Filter.IsBonus, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsBonus, "Есть премия")
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.PostTitle, "Должность", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.PostTitle, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "12" })
                                <span style="color:red;"></span>
                            </dd>

                            <dt>
                                @Html.LabelFor(m => m.Filter.DepartmentName, "Название отдела", new { style = "margin-top: 12px" })
                            </dt>
                            <dd>
                                @Html.TextBoxFor(m => m.Filter.DepartmentName, null, new { @class = "form-control", style = "margin-top: 12px", maxlength = "12" })
                                <span style="color:red;"></span>
                            </dd>
                        </dl>
                    </td>
                    <td valign="top">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.Label("Sort", "Сортировка")
                            </dt>
                            <dd>
                                @Html.DropDownListFor(m => m.Filter.SortField, new SelectList(new[] { new { label = "По фамилии сотрудника", value = "LastName" }, new { label = "По Email", value = "Email" }, new { label = "По дате найма на работу", value = "HireDate" }, new { label = "По зарплате", value = "Salary" }, new { label = "По премии", value = "Bonus" }, new { label = "По должности", value = "Post" }, new { label = "По названию отдела", value = "DepartmentName" } }, "value", "label"), new { @class = "form-control", style = "margin-bottom: 12px" })
                                @Html.DropDownListFor(m => m.Filter.SortOrder, new SelectList(new[] { new { label = "По возрастанию", value = "Asc" }, new { label = "По убыванию", value = "Desc" } }, "value", "label"), new { @class = "form-control", style = "margin-bottom: 12px" })
                            </dd>

                            <dt>
                                @Html.Label("Columns", "Показывать столбцы")
                            </dt>
                            <dd>
                                <input type="checkbox" id="Filter_Columns0" name="Filter.Columns" value="0" />
                                @Html.Label("Columns0", "Фамилия сотрудника")
                                <br />
                                <input type="checkbox" id="Filter_Columns1" name="Filter.Columns" value="1" />
                                @Html.Label("Columns1", "Имя сотрудника")
                                <br />
                                <input type="checkbox" id="Filter_Columns2" name="Filter.Columns" value="2" />
                                @Html.Label("Columns2", "Email")
                                <br />
                                <input type="checkbox" id="Filter_Columns3" name="Filter.Columns" value="3" />
                                @Html.Label("Columns3", "Телефон")
                                <br />
                                <input type="checkbox" id="Filter_Columns4" name="Filter.Columns" value="4" />
                                @Html.Label("Columns4", "Дата приема на работу")
                                <br />
                                <input type="checkbox" id="Filter_Columns5" name="Filter.Columns" value="5" />
                                @Html.Label("Columns5", "Зарплата")
                                <br />
                                <input type="checkbox" id="Filter_Columns6" name="Filter.Columns" value="6" />
                                @Html.Label("Columns6", "Премия")
                                <br />
                                <input type="checkbox" id="Filter_Columns7" name="Filter.Columns" value="7" />
                                @Html.Label("Columns7", "Должность")
                                <br />
                                <input type="checkbox" id="Filter_Columns8" name="Filter.Columns" value="8" />
                                @Html.Label("Columns8", "Название отдела")
                            </dd>

                            <dt>
                                @Html.Label("AntiFilter", "Несоответствующие фильтру")
                            </dt>
                            <dd>
                                @Html.CheckBoxFor(m => m.Filter.IsAntiFilter, new { style = "margin-bottom: 12px" })
                                @Html.LabelFor(m => m.Filter.IsAntiFilter, "Отрицание фильтра")
                            </dd>

                            <dt>
                            </dt>
                            <dd>
                                <input type="submit" value="Найти" class="btn btn-primary" />
                                <div id="reset" class="btn btn-default">Сброс</div>
                            </dd>
                        </dl>
                    </td>
                </tr>
            </table>
        }
    </div>
</div>

<hr />

<div>
    <div id="performanceTestsToggle" class="btn btn-default">
        Тесты производительности <i>(Показать)</i>
    </div>
    <div id="performanceTests" style="display:none;">
        <p>
            @using (Html.BeginForm("TestCreate", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест добавления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Добавить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestRead", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест выборки сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Salary", "Salary >= ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=50000 name="salary" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Выбрать" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestUpdate", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест обновления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Обновить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
        <hr />
        <p>
            @using (Html.BeginForm("TestDelete", "Home")) {
                <div class="form-horizontal">
                    <h4>@Html.Label("Test", "Тест удаления сотрудников")</h4>

                    <div class="form-group">
                        @Html.Label("Num", "Количество запросов", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="number" min=1 max=1000000 value=10 name="num" class="form-control" />
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Удалить" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </p>
    </div>
</div>

<hr />
<p>
    @Html.ActionLink("Добавить сотрудника", "Create", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Удалить всех сотрудников", "DeleteAll", null, new { @class = "btn btn-default" })
    @Html.ActionLink("Преобразовать данные в Json", "ExportJson", null, new { @class = "btn btn-default" })
</p>

@if (Model.Employees.Count() > 0) {
    <table class="table table-striped table-hover">
        <tr>
            @if (Model.Filter.Columns.Contains("0")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).LastName)
                </th>
            }
            @if (Model.Filter.Columns.Contains("1")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).FirstName)
                </th>
            }
            @if (Model.Filter.Columns.Contains("2")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Email)
                </th>
            }
            @if (Model.Filter.Columns.Contains("3")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).PhoneNumber)
                </th>
            }
            @if (Model.Filter.Columns.Contains("4")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).HireDate)
                </th>
            }
            @if (Model.Filter.Columns.Contains("5")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Salary)
                </th>
            }
            @if (Model.Filter.Columns.Contains("6")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Bonus)
                </th>
            }
            @if (Model.Filter.Columns.Contains("7")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Post.Title)
                </th>
            }
            @if (Model.Filter.Columns.Contains("8")) {
                <th>
                    @Html.DisplayNameFor(model => model.Employees.ElementAt(0).Department.DepartmentName)
                </th>
            }
            <th></th>
        </tr>

        @foreach (var item in Model.Employees) {
            <tr>
                @if (Model.Filter.Columns.Contains("0")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("1")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("2")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("3")) {
                    <td width="130px">
                        @Html.DisplayFor(modelItem => item.PhoneNumber)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("4")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.HireDate)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("5")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Salary)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("6")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Bonus)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("7")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Post.Title)
                    </td>
                }
                @if (Model.Filter.Columns.Contains("8")) {
                    <td>
                        @Html.DisplayFor(modelItem => item.Department.DepartmentName)
                    </td>
                }
                <td width="150px">
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </table>
}

<p>
    @Html.Label("Count", "Количество сотрудников: " + Model.PageInfo.TotalItems)
</p>

<div class="btn-group">
    @Html.PageLinks(Model.PageInfo, x => Url.Action("Index", new { filterAsJsonString = Html.Raw(Json.Encode(Model.Filter)), page = x }))
</div>

@section scripts {
<script>
    $(document).ready(function() {
        // Добавляет на форму фильтра текстовое поле Фамилия
        $('#addlastname').on('click', function(event) {
            event.preventDefault();
            var countLastName = $('#lname input').length;
            if (countLastName < 5)
                $('#lname').append('<input class="form-control" style="margin-top:6px;" id="Filter_LastName_' + countLastName + '_" name="Filter.LastName[' + countLastName + ']" type="text" maxlength="15" value="" /><span style="color:red;"></span>')
        });

        // Добавляет на форму фильтра текстовое поле Премия
        $('#addbonus').on('click', function(event) {
            event.preventDefault();
            var countBonus = $('#bns input').length;
            if (countBonus < 5)
                $('#bns').append('<input class="form-control" style="margin-top:6px;" id="Filter_Bonus[' + countBonus +']" name="Filter.Bonus[' + countBonus +']" type="number" min="0" max="1" step="0.01" value="" /><span style="color:red;"></span>')
        });

        // Устанавливает checkbox на форме фильтра
        var columns = '@String.Concat(Model.Filter.Columns)';
        $('#Filter_Columns0').prop('checked', columns.includes('0'));
        $('#Filter_Columns1').prop('checked', columns.includes('1'));
        $('#Filter_Columns2').prop('checked', columns.includes('2'));
        $('#Filter_Columns3').prop('checked', columns.includes('3'));
        $('#Filter_Columns4').prop('checked', columns.includes('4'));
        $('#Filter_Columns5').prop('checked', columns.includes('5'));
        $('#Filter_Columns6').prop('checked', columns.includes('6'));
        $('#Filter_Columns7').prop('checked', columns.includes('7'));
        $('#Filter_Columns8').prop('checked', columns.includes('8'));

        // Устанавливает значения в поля Фамилии на форме фильтра
        @if (Model.Filter.LastName != null) {
            string[] lastnames = Model.Filter.LastName.Where(x => !string.IsNullOrWhiteSpace(x)).ToArray();
            if (lastnames.Length > 0) {
                @:$('#Filter_LastName_0_').prop('value', '@lastnames[0]');
                for (int i = 1; i < lastnames.Length; i++) {
                    @:$('#lname').append('<input class="form-control" style="margin-top:6px;" id="Filter_LastName_'+ @i +'_" name="Filter.LastName['+ @i +']" type="text" maxlength="15" value="@lastnames[i]" /><span style="color:red;"></span>')
                }
            }
        }

        // Устанавливает значения в поля Премии на форме фильтра
        @if (Model.Filter.Bonus != null) {
            double?[] bonuses = Model.Filter.Bonus.Where(x => x.HasValue).ToArray();
            if (bonuses.Length > 0) {
                @:$('#Filter_Bonus_0_').prop('value', '@bonuses[0]');
                for (int i = 1; i < bonuses.Length; i++) {
                    @:$('#bns').append('<input class="form-control" style="margin-top:6px;" id="Filter_Bonus_' + @i +'_" name="Filter.Bonus['+ @i +']" type="number" min="0" max="1" step="0.01" value="@bonuses[i]" /><span style="color:red;"></span>')
                }
            }
        }

        // Ограничивает количество символов в текстовых полях фильтра
        var handlerMaxLength = function(event) {
            if ($(this).val().length >= $(this).attr('maxlength')) {
                $(this).next('span').text("Слишком длинное значение");
                var $input = $(this);
                setTimeout(function() { $input.next('span').text("") }, 2000);
            }
        };
        $('#lname').on('input', 'input', handlerMaxLength);
        $('input[type="text"]').on('input', handlerMaxLength);

        // Ограничивает ввод цифр в полях Фамилии, Должности и Названии отдела
        var handlerOnlyLetters = function(key) {
            if (key.charCode > 47 && key.charCode < 58) {
                $(this).next('span').text("Цифры недопустимы");
                var $input = $(this);
                setTimeout(function() { $input.next('span').text("") }, 2000);
                return false;
            }
        };
        $('#lname').on('keypress', 'input', handlerOnlyLetters);
        $('#Filter_PostTitle').add('#Filter_DepartmentName').on('keypress', handlerOnlyLetters);

        // Ограничивает диапазон значений в полях Зарплаты
        $('#Filter_MinSalary').add('#Filter_MaxSalary').on('keypress', function(key) {
            if ($(this).val() < 0 || $(this).val() > 9999999 || $(this).val().length > 7) {
                $(this).next('span').text("Допустимый диапазон [0; 9999999]");
                var $input = $(this);
                setTimeout(function() { $input.next('span').text("") }, 2000);
                return false;
            }
        });

        // Ограничивает диапазон значений в поле Премия
        $('#bns').on('keypress', 'input', function(key) {
            if ($(this).val() < 0 || $(this).val() > 1 || $(this).val().length > 4) {
                $(this).next('span').text("Допустимый диапазон [0.00; 1.00]");
                var $input = $(this);
                setTimeout(function () { $input.next('span').text("") }, 2000);
                return false;
            }
        });

        // Показывает или скрывает блок с анимацией
        $('#animationToggle').on('click', function() {
            $('#animation').slideToggle("slow");
            if ($(this).html().trim() == "С хорошим настроением лучше работается <i>(Показать)</i>")
                $(this).html("С хорошим настроением лучше работается <i>(Скрыть)</i>")
            else
                $(this).html("С хорошим настроением лучше работается <i>(Показать)</i>")
        });

        // Показывает или скрывает блок с фильтром
        $('#filterToggle').on('click', function() {
            $('#filter').slideToggle("slow");
            if ($(this).html().trim() == "Поиск по фильтру <i>(Показать)</i>")
                $(this).html("Поиск по фильтру <i>(Скрыть)</i>")
            else
                $(this).html("Поиск по фильтру <i>(Показать)</i>")
        });

        // Показывает или скрывает блок с тестами
        $('#performanceTestsToggle').on('click', function() {
            $('#performanceTests').slideToggle("slow");
            if ($(this).html().trim() == "Тесты производительности <i>(Показать)</i>")
                $(this).html("Тесты производительности <i>(Скрыть)</i>")
            else
                $(this).html("Тесты производительности <i>(Показать)</i>")
        });

        // Сбрасывает параметры фильтра в дефолт
        $('#reset').on('click', function() {
            // Сбрасывает checkbox на форме фильтра
            $('input[type="checkbox"]').prop('checked', false);
            $('input[name="Filter.Columns"]').prop('checked', true);

            // Сбрасывает textbox на форме фильтра
            $('#lname').html('<input class="form-control"  id="Filter_LastName_0_" name="Filter.LastName[0]" type="text" maxlength="15" value="" /><span style="color:red;"></span>')
            $('#Filter_Email').prop('value', '');
            $('#Filter_HireDate').prop('value', '');
            $('#Filter_MinSalary').prop('value', '');
            $('#Filter_MaxSalary').prop('value', '');
            $('#bns').html('<input class="form-control" style="margin-top:12px;" id="Filter_Bonus_0_" name="Filter.Bonus[0]" type="number" min="0" max="1" step="0.01" value="" /><span style="color:red;"></span>')
            $('#Filter_PostTitle').prop('value', '');
            $('#Filter_DepartmentName').prop('value', '');

            // Сбрасывает dropdownlist на форме фильтра
            $('#Filter_SortField option[value="LastName"]').prop('selected', true);
            $('#Filter_SortOrder option[value="Asc"]').prop('selected', true);
        });
    })
</script>
}
